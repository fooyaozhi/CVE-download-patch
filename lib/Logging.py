import logging

from lib.Config import Configuration

class Logger():
    SECTION_DIV = '=========================='

    def __init__(self, log_to_console=True, log_to_file=False, level=logging.INFO):
        # Init formatter and handlers
        self.level = level
        self.handlers = []
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        if log_to_console:
            ch = logging.StreamHandler()
            ch.setLevel(self.level)
            ch.setFormatter(formatter)
            self.handlers.append(ch)
        log_to_file = False
        # if log_to_file:
        #     log_file = Configuration.getUpdateLogFile()
        #     if log_file:
        #         fh = logging.FileHandler(log_file)
        #         fh.setLevel(self.level)                
        #         fh.setFormatter(formatter)
        #         self.handlers.append(fh)
        #     else:
        #         print ('Cannot log to file, no update file specified.')

    @staticmethod
    def parse_log_level(level_str):
        levels = {
            'info': logging.INFO,
            'warning': logging.WARNING,
            'error': logging.ERROR,
            'critical': logging.CRITICAL
        }
        if level_str in levels:
            return levels[level_str]
        return None

    def log(self, logger_name, message, new_section=False, level=None):
        if level:
            level = self.parse_log_level(level)
        if not level:
            level = self.level

        if logger_name and message:
            logger = logging.getLogger(logger_name)
            logger.setLevel(self.level)
            for h in self.handlers:
                logger.addHandler(h)

            # Print message
            logger.log(level, message)

            if new_section:
                logger.info(self.__class__.SECTION_DIV)