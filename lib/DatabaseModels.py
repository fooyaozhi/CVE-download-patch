from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import JSONB, ARRAY
from sqlalchemy import (
    LargeBinary,
    Boolean,
    CheckConstraint,
    Column,
    DateTime,
    Float,
    ForeignKey,
    Integer,
    SmallInteger,    
    String,
    Text,
    UniqueConstraint,
    text
)

Base = declarative_base()
metadata = Base.metadata


# CVE Pipeline Tables

class User(Base):
    __tablename__ = 'users_user'

    id = Column(Integer, primary_key=True,
        server_default='nextval(users_user_id_seq::regclass)')
    username = Column(String(150))

class Language(Base):
    __tablename__ = 'triage_language'

    id = Column(Integer, primary_key=True)
    name = Column(String(32), nullable=False, unique=True)
    
    
class Vulnerability(Base):
    __tablename__ = '1_scantist_vulnerability'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_vulnerability_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=False)
    processed_time = Column(DateTime, nullable=True)

    description = Column(Text)
    public_id = Column(String(50), nullable=False, unique=True)
    latest_version = Column(Integer, nullable=True)
    latest_score = Column(Float, nullable=True)
    is_patch_available = Column(Boolean, default=False)
    vuln_created = Column(DateTime(True), nullable=False)
    vuln_modified = Column(DateTime(True), nullable=False)
    is_patch_uncollectable = Column(Boolean, default=False)
    is_closed_source = Column(Boolean, default=False)
    extra_data = Column(JSONB, default=dict)
    cwe_id = Column(ForeignKey('scantist_cwe.id', deferrable=True, initially=''))

class CvssV2(Base):
    __tablename__ = '1_scantist_cvssv2'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_cvssv2_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=True)
    processed_time = Column(DateTime, nullable=True)
    score = Column(Float(53), nullable=False)
    vector = Column(JSONB, default=dict)
    impact_score = Column(Float(53), default=0.0)
    exploitability_score = Column(Float(53), default=0.0)
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id',
        deferrable=True, initially=''), unique=True)

    vulnerability = relationship('Vulnerability', uselist=False)

class CvssV3(Base):
    __tablename__ = '1_scantist_cvssv3'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_cvssv3_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=True)
    processed_time = Column(DateTime, nullable=True)
    score = Column(Float(53), nullable=False)
    vector = Column(JSONB, default=dict)
    impact_score = Column(Float(53), default=0.0)
    exploitability_score = Column(Float(53), default=0.0)
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id',
        deferrable=True, initially=''), unique=True)

    vulnerability = relationship('Vulnerability', uselist=False)


class VulnerabilityLanguage(Base):
    __tablename__ = '1_scantist_vulnerability_language'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_vulnerability_language_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=True)
    processed_time = Column(DateTime, nullable=True)
    
    language_id = Column(ForeignKey('triage_language.id', deferrable=True, initially=''))
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id', deferrable=True, initially=''))
    submitted_by_id = Column(ForeignKey('users_user.id', deferrable=True, initially=''))

class VulnerabilityLanguagePrediction(Base):
    __tablename__ = '1_scantist_vulnerability_language_prediction'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_vulnerability_language_prediction_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)

    confidence = Column(Float, nullable=True)
    extension_score = Column(Float, nullable=True, default=0.0)
    product_score = Column(Float, nullable=True, default=0.0)
    summary_score = Column(Float, nullable=True, default=0.0)
    closedsource_score = Column(Float, nullable=True, default=0.0)
    matched_keywords = Column(ARRAY(String(128)), default=list)
    language_id = Column(ForeignKey('triage_language.id', deferrable=True, initially=''))
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id', deferrable=True, initially=''))

class VulnerabilityLibrary(Base):
    __tablename__ = '1_scantist_vulnerability_library'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_vulnerability_library_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=True)
    processed_time = Column(DateTime, nullable=True)
    library_id = Column(ForeignKey('scantist_library.id', deferrable=True, initially=''), nullable=True)
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id', deferrable=True, initially=''))
    version_ranges = Column(ARRAY(String(520)), default=list)
    exclude_versions = Column(ARRAY(String(520)), default=list)
    submitted_by_id = Column(ForeignKey('users_user.id', deferrable=True, initially=''))
    confirmed = Column(Boolean, default=False)

class VulnerabilityLibraryVersion(Base):
    __tablename__ = '1_scantist_vulnerability_library_version'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_vulnerability_library_version_id_seq"::regclass)')
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id', deferrable=True, initially=''))
    libraryversion_id = Column(ForeignKey('scantist_library_version.id', deferrable=True, initially=''))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=True)
    processed_time = Column(DateTime, nullable=True)

class VulnerabilityLibraryPrediction(Base):
    __tablename__ = '1_scantist_vulnerability_library_prediction'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_vulnerability_library_prediction_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    library_id = Column(ForeignKey('scantist_library.id', deferrable=True, initially=''), nullable=True)
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id', deferrable=True, initially=''))
    confidence = Column(Float(53), default=0.0)
    matched_keywords = Column(ARRAY(String(128)), default=list)
    version_ranges = Column(ARRAY(String(520)), default=list)
    exclude_versions = Column(ARRAY(String(520)), default=list)

class Patch(Base):
    __tablename__ = '1_scantist_patch'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_patch_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=False)
    processed_time = Column(DateTime, nullable=True)

    patch_status = Column(Integer, default=0)
    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id', deferrable=True, initially=''))
    version_id = Column(ForeignKey('scantist_library_version.id', deferrable=True, initially=''), nullable=True)
    patch_date = Column(DateTime, nullable=True)
    patch_commit_id = Column(String(300), nullable=True)
    valid_library_version_ids = Column(Text)
    language = Column(String(64), nullable=True)
    patch_hash = Column(Text)
    extra_data = Column(JSONB, default=dict)
    raw = Column(LargeBinary)

    vulnerability = relationship('Vulnerability')
    version = relationship('ScantistLibraryVersion')

class PatchHunk(Base):
    __tablename__ = '1_scantist_patchhunk'

    id = Column(Integer, primary_key=True, server_default="nextval('1_scantist_patchhunk_id_seq'::regclass)")
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, default=True)
    processed_time = Column(DateTime, nullable=True)

    vulnerable_code = Column(Text)
    patched_code = Column(Text)
    hunk_code = Column(Text)
    affected_file = Column(String(50))
    affected_function = Column(String(255))
    patch_id = Column(ForeignKey('1_scantist_patch.id', deferrable=True, initially='DEFERRED'), index=True)
    extra_data = Column(JSONB, default=dict)
    hunk_hash = Column(Text)
    patch_code_hash = Column(Text)
    vul_code_hash = Column(Text)

    patch = relationship('Patch')

class PatchSource(Base):
    __tablename__ = '1_scantist_patchsource'

    id = Column(Integer, primary_key=True,
        server_default='nextval("1_scantist_patchsource_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)

    vulnerability_id = Column(ForeignKey('1_scantist_vulnerability.id', deferrable=True, initially=''))
    url = Column(String(2000))
    patch_hash = Column(Text)
    is_patch_extracted = Column(Boolean)
    confidence = Column(Integer)
    
    vulnerability = relationship('Vulnerability')


# P5 Intermediate processing table for missing libs and versions
class MissingLibraryVersion(Base):
    __tablename__ = 'p5_scantist_missing_library_version'

    id = Column(Integer, primary_key=True,
        server_default='nextval("p5_scantist_missing_library_version_id_seq"::regclass)')
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    issue_id = Column(Integer)
    issue_type = Column(String(10))
    note = Column(String(20))
    name = Column(String(255))
    vendor = Column(String(255))
    platform = Column(String(255))
    version_numbers = Column(ARRAY(String(255)), default=list)
    p5_process_status = Column(String(50))
    p1_process_flag = Column(Boolean, nullable=False)
    p2_process_flag = Column(Boolean, nullable=False)


# Master Tables

class ScantistLibrary(Base):
    __tablename__ = 'scantist_library'
    __table_args__ = (
        UniqueConstraint('name', 'vendor', 'platform', 'source'),
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_library_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    name = Column(String(255))
    description = Column(Text)
    vendor = Column(String(255))
    language = Column(String(64))
    platform = Column(String(255))
    source = Column(String(255))
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))


class ScantistLicense(Base):
    __tablename__ = 'scantist_license'
    __table_args__ = (
        CheckConstraint('score >= 0'),
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_license_id_seq'::regclass)"))
    name = Column(String(150))
    description = Column(Text)
    identifier = Column(String(50))
    score = Column(SmallInteger, nullable=False)
    spdx_index = Column(String(32))
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))


class ScantistSecurityissue(Base):
    __tablename__ = 'scantist_securityissue'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_securityissue_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    score = Column(Float(53))
    description = Column(Text)
    public_id = Column(String(50))
    vulnerable_software_versions = Column(Text, default='Not available at the moment')
    language = Column(String(64), nullable=True)
    extra_data = Column(JSONB, default=dict)
    cwe_id = Column(ForeignKey('scantist_cwe.id', deferrable=True, initially=''))
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))


class ScantistSecuritybug(Base):
    __tablename__ = 'scantist_securitybug'

    securityissue_ptr_id = Column(ForeignKey('scantist_securityissue.id', deferrable=True, initially='DEFERRED'),
                                  primary_key=True)
    impact = Column(Float(53))
    exploitability = Column(Float(53))
    vector = Column(Text)
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))


class ScantistVulnerability(Base):
    __tablename__ = 'scantist_vulnerability'

    securityissue_ptr_id = Column(ForeignKey('scantist_securityissue.id', deferrable=True, initially='DEFERRED'),
                                  primary_key=True)
    latest_version = Column(Integer)
    latest_score = Column(Float(53))
    is_patch_available = Column(Boolean, nullable=False)
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))


class ScantistLibraryVersion(Base):
    __tablename__ = 'scantist_library_version'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_library_version_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    version_number = Column(String(255))
    release_date = Column(DateTime(True))
    is_active = Column(Boolean, nullable=False)
    is_officially_supported = Column(Boolean, nullable=False)
    library_id = Column(ForeignKey('scantist_library.id', deferrable=True, initially='DEFERRED'), index=True)
    license_id = Column(ForeignKey('scantist_license.id', deferrable=True, initially='DEFERRED'), index=True)
    is_clean = Column(Boolean, nullable=False)
    source = Column(String(16))
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))

    library = relationship('ScantistLibrary')
    license = relationship('ScantistLicense')


class ScantistLibraryurl(Base):
    __tablename__ = 'scantist_libraryurl'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_libraryurl_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    url = Column(String(255), nullable=False)
    library_id = Column(ForeignKey('scantist_library.id', deferrable=True, initially='DEFERRED'), index=True)
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))

    library = relationship('ScantistLibrary')


class ScantistCvssv2(Base):
    __tablename__ = 'scantist_cvssv2'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_cvssv2_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    score = Column(Float(53), nullable=False)
    vector = Column(JSONB, default=dict)
    impact_score = Column(Float(53))
    exploitability_score = Column(Float(53))
    vulnerability_id = Column(
        ForeignKey('scantist_vulnerability.securityissue_ptr_id', deferrable=True, initially='DEFERRED'), unique=True)
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))

    vulnerability = relationship('ScantistVulnerability', uselist=False)


class ScantistCvssv3(Base):
    __tablename__ = 'scantist_cvssv3'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_cvssv3_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    score = Column(Float(53), nullable=False)
    vector = Column(JSONB, default=dict)
    impact_score = Column(Float(53))
    exploitability_score = Column(Float(53))
    vulnerability_id = Column(
        ForeignKey('scantist_vulnerability.securityissue_ptr_id', deferrable=True, initially='DEFERRED'), unique=True)
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))

    vulnerability = relationship('ScantistVulnerability', uselist=False)


class ScantistLibraryversionissue(Base):
    __tablename__ = 'scantist_libraryversionissue'
    __table_args__ = (
        UniqueConstraint('library_version_id', 'security_issue_id'),
    )

    id = Column(Integer, primary_key=True,
                server_default=text("nextval('scantist_libraryversionissue_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_source = Column(Boolean, nullable=False)
    library_version_id = Column(ForeignKey('scantist_library_version.id', deferrable=True, initially='DEFERRED'),
                                index=True)
    security_issue_id = Column(ForeignKey('scantist_securityissue.id', deferrable=True, initially='DEFERRED'),
                               index=True)
    issue_type = Column(String(10), nullable=False)
    up_to = Column(Boolean, nullable=False)
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))

    library_version = relationship('ScantistLibraryVersion')
    security_issue = relationship('ScantistSecurityissue')


class ScantistPatch(Base):
    __tablename__ = 'scantist_patch'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_patch_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    security_issue_id = Column(ForeignKey('scantist_securityissue.id', deferrable=True, initially='DEFERRED'),
                               index=True)
    version_id = Column(ForeignKey('scantist_library_version.id', deferrable=True, initially='DEFERRED'), index=True)
    is_valid = Column(Boolean, nullable=False)
    patch_commit_id = Column(String(300))
    patch_date = Column(DateTime(True))
    valid_library_version_ids = Column(Text)
    issue_type = Column(String(10), nullable=False, index=True)
    language = Column(String(64))
    patch_hash = Column(Text)
    extra_data = Column(JSONB, default=dict)
    processed_time = Column(DateTime(True))

    security_issue = relationship('ScantistSecurityissue')
    version = relationship('ScantistLibraryVersion')


class ScantistPatchhunk(Base):
    __tablename__ = 'scantist_patchhunk'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_patchhunk_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    vulnerable_code = Column(Text)
    patched_code = Column(Text)
    hunk_code = Column(Text)
    affected_file = Column(String(50))
    affected_function = Column(String(255))
    patch_id = Column(ForeignKey('scantist_patch.id', deferrable=True, initially='DEFERRED'), index=True)
    issue_type = Column(String(10), index=True, server_default=text("'cve'::character varying"))
    extra_data = Column(JSONB, default=dict)
    hunk_hash = Column(Text)
    is_valid = Column(Boolean, nullable=False)
    patch_code_hash = Column(Text)
    vul_code_hash = Column(Text)
    processed_time = Column(DateTime(True))

    patch = relationship('ScantistPatch')

class ScantistCWE(Base):
    __tablename__ = 'scantist_cwe'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_cwe_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, nullable=False)
    processed_time = Column(DateTime(True))
    cwe_id = Column(String(200))
    name = Column(Text)
    description = Column(Text)
    extended_description = Column(Text)
    status = Column(String(200))
    weakness_abstraction = Column(String(200))

class ScantistMonitor(Base):
    __tablename__ = 'scantist_monitor'

    id = Column(Integer, primary_key=True, server_default=text("nextval('scantist_monitor_id_seq'::regclass)"))
    created = Column(DateTime(True), nullable=False)
    modified = Column(DateTime(True), nullable=False)
    is_valid = Column(Boolean, nullable=False)
    input = Column(Integer, nullable=False)
    output = Column(Integer, nullable=False)
    error = Column(Integer, nullable=False)
    other = Column(Integer, nullable=False)
    pipeline = Column(String, nullable=False)
    variation = Column(String)
    succeed_status = Column(Boolean, nullable=False)